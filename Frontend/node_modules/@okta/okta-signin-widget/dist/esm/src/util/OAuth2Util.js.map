{"version":3,"file":"OAuth2Util.js","sources":["../../../../src/util/OAuth2Util.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _, loc } from 'okta';\nimport Enums from './Enums';\nimport Errors from './Errors';\nimport Util from './Util';\nconst util = {};\n\n// https://github.com/okta/okta-auth-js#authorize-options\nconst AUTH_PARAMS = [\n  'responseType',\n  'scopes',\n  'state',\n  'nonce',\n  'idp',\n  'idpScope',\n  'display',\n  'prompt',\n  'maxAge',\n  'loginHint'\n];\nutil.AUTH_PARAMS = AUTH_PARAMS;\n\nconst JIT_ERRORS = [\n  'jit_failure_missing_fields',\n  'jit_failure_invalid_login_format',\n  'jit_failure_values_not_match_pattern',\n  'jit_failure_values_too_long',\n  'jit_failure_invalid_locale',\n];\n\n/**\n * Get the tokens in the OIDC/OAUTH flows\n *\n * @param settings - settings model object\n * @param params - {idp: 'xxx'} for social auth\n *                 {sessionToken: 'xxx'} for okta idp\n */\nutil.getTokens = function(settings, params, controller) {\n  function success(result) {\n    settings.callGlobalSuccess(Enums.SUCCESS, result);\n  }\n\n  function error(error) {\n    let showError = false;\n    let responseJSON = error;\n\n    // User is not assigned to OIDC client\n    if (error.errorCode === 'access_denied') {\n      showError = true;\n    }\n\n    if (JIT_ERRORS.includes(error.errorCode)) {\n      showError = true;\n      responseJSON = { errorSummary: loc('error.jit_failure', 'login') };\n    }\n\n    // MFA is required but prompt=none (authn V1)\n    const mfaRequiredMsg = 'The client specified not to prompt, but the client app requires re-authentication or MFA.';\n    if (error.errorCode === 'login_required' && error.errorSummary === mfaRequiredMsg) {\n      showError = true;\n      responseJSON = { errorSummary: loc('error.mfa.required', 'login') };\n    }\n\n    if (showError) {\n      controller.model.trigger('error', controller.model, { responseJSON });\n      controller.model.appState.trigger('removeLoading');\n    }\n\n    Util.triggerAfterError(controller, new Errors.OAuthError(error.message), settings);\n  }\n\n  const authClient = settings.getAuthClient();\n  const isAuthorizationCodeFlow = authClient.isAuthorizationCodeFlow() && !authClient.isPKCE();\n  const options = settings.toJSON({ verbose: true });\n  const getTokenOptions = {};\n\n  _.extend(\n    getTokenOptions,\n    _.pick(options, 'clientId', 'redirectUri'),\n    _.pick(options.authParams, AUTH_PARAMS),\n    params\n  );\n\n  // Extra Options for Social Idp popup window title and id_token response timeout\n  getTokenOptions.popupTitle = loc('socialauth.popup.title', 'login');\n  getTokenOptions.timeout = options.oAuthTimeout;\n\n  // Redirect flow - this can be used when logging into an external IDP, or\n  // converting the Okta sessionToken to an access_token, id_token, and/or\n  // authorization code. Note: The authorization code flow will always redirect.\n  if (options.redirect === 'always' || isAuthorizationCodeFlow) {\n    authClient.token.getWithRedirect(getTokenOptions).catch(error);\n  } else if (getTokenOptions.sessionToken) {\n    // Default flow if logging in with Okta as the IDP - convert sessionToken to\n    // tokens in a hidden iframe. Used in Single Page Apps where the app does\n    // not want to redirect away from the page to convert the token.\n    authClient.token.getWithoutPrompt(getTokenOptions).then(success).catch(error);\n  } else {\n    // Default flow if logging in with an external IDP - opens a popup and\n    // gets the token from a postMessage response.\n    authClient.token.getWithPopup(getTokenOptions).then(success).catch(error);\n  }\n};\n\nexport default util;\n"],"names":["util","AUTH_PARAMS","JIT_ERRORS","getTokens","settings","params","controller","success","result","callGlobalSuccess","Enums","SUCCESS","error","showError","responseJSON","errorCode","includes","errorSummary","loc","mfaRequiredMsg","model","trigger","appState","Util","triggerAfterError","Errors","OAuthError","message","authClient","getAuthClient","isAuthorizationCodeFlow","isPKCE","options","toJSON","verbose","getTokenOptions","_","extend","pick","authParams","popupTitle","timeout","oAuthTimeout","redirect","token","getWithRedirect","catch","sessionToken","getWithoutPrompt","then","getWithPopup"],"mappings":"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"}