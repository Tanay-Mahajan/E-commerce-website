{"version":3,"file":"BaseLoginRouter.js","sources":["../../../../src/v2/BaseLoginRouter.ts"],"sourcesContent":["/* eslint max-depth: [1,4] */\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// BaseLoginRouter contains the more complicated router logic - rendering/\n// transition, etc. Most router changes should happen in LoginRouter (which is\n// responsible for adding new routes)\nimport { _, $, Backbone, Router, loc, BaseRouterOptions } from 'okta';\nimport Settings from 'models/Settings';\nimport Bundles from 'util/Bundles';\nimport BrowserFeatures from 'util/BrowserFeatures';\nimport ColorsUtil from 'util/ColorsUtil';\nimport Enums from 'util/Enums';\nimport Errors from 'util/Errors';\nimport Logger from 'util/Logger';\nimport LanguageUtil from 'util/LanguageUtil';\nimport AuthContainer from 'v1/views/shared/AuthContainer';\nimport Header from 'v1/views/shared/Header';\nimport AppState from './models/AppState';\nimport sessionStorageHelper from './client/sessionStorageHelper';\nimport {\n  startLoginFlow,\n  interactionCodeFlow,\n  handleConfiguredFlow,\n} from './client';\n\nimport transformIdxResponse from './ion/transformIdxResponse';\nimport { FORMS } from './ion/RemediationConstants';\nimport CookieUtil from 'util/CookieUtil';\nimport { formatError, LegacyIdxError, StandardApiError } from './client/formatError';\nimport { RenderError, RenderResult } from 'types';\nimport { OktaAuth, IdxResponse } from '@okta/okta-auth-js';\nimport Hooks from 'models/Hooks';\nimport IonHelper from './ion/IonResponseHelper';\n\nexport interface BaseLoginRouterOptions extends BaseRouterOptions, Backbone.RouterOptions {\n  globalSuccessFn?: (res: RenderResult) => void;\n  globalErrorFn?: (res: RenderError) => void;\n  authClient?: OktaAuth;\n  hooks: Hooks\n}\n\nclass BaseLoginRouter extends Router<Settings, BaseLoginRouterOptions> {\n  Events: Backbone.Events = Backbone.Events; // also set on prototype\n  hasControllerRendered = false;\n  settings: Settings;\n  appState: AppState;\n  hooks: Hooks;\n  header: Header;\n\n  constructor(options: BaseLoginRouterOptions) {\n    super(options);\n\n    // Create a default success and/or error handler if\n    // one is not provided.\n    if (!options.globalSuccessFn) {\n      options.globalSuccessFn = function() { /* dummy function */ };\n    }\n    if (!options.globalErrorFn) {\n      options.globalErrorFn = function(err) {\n        Logger.error(err);\n      };\n    }\n\n    this.settings = new Settings(_.omit(options, 'el', 'authClient', 'hooks'), { parse: true });\n    this.settings.setAuthClient(options.authClient);\n\n    if (!options.el) {\n      this.settings.callGlobalError(new Errors.ConfigError(loc('error.required.el')));\n    }\n\n    $('body > div').on('click', function() {\n      // OKTA-69769 Tooltip wont close on iPhone/iPad\n      // Registering a click handler on the first div\n      // allows a tap that falls outside the tooltip\n      // to be registered as a tap by iOS\n      // and then the open tooltip will lose focus and close.\n    });\n\n    this.hooks = options.hooks;\n    this.appState = new AppState();\n\n    const wrapper = new AuthContainer({ appState: this.appState });\n\n    $(options.el).append(wrapper.render().$el);\n    this.el = `#${Enums.WIDGET_CONTAINER_ID}`;\n    this.header = new Header({\n      el: this.el,\n      appState: this.appState,\n      settings: this.settings,\n    });\n\n    // Hide until unitial render\n    this.hide();\n\n    this.listenTo(this.appState, 'change:deviceFingerprint', this.updateDeviceFingerprint);\n    this.listenTo(this.appState, 'error', this.handleError);\n    this.listenTo(this.appState, 'updateAppState', this.handleUpdateAppState);\n    this.listenTo(this.appState, 'remediationError', this.handleIdxResponseFailure);\n    this.listenTo(this.appState, 'restartLoginFlow', this.restartLoginFlow);\n  }\n\n  updateDeviceFingerprint() {\n    const authClient = this.settings.getAuthClient();\n    const fingerprint = this.appState.get('deviceFingerprint');\n    if (fingerprint) {\n      authClient.http.setRequestHeader('X-Device-Fingerprint', fingerprint);\n    }\n  }\n\n  async handleUpdateAppState(idxResponse: IdxResponse): Promise<IdxResponse> {\n    // Only update the cookie when the user has successfully authenticated themselves \n    // to avoid incorrect/unnecessary updates.\n    if (this.hasAuthenticationSucceeded(idxResponse) \n      && this.settings.get('features.rememberMyUsernameOnOIE')) {\n      this.updateIdentifierCookie(idxResponse);\n    }    \n\n    const lastResponse = this.appState.get('idx');\n    const useInteractionCodeFlow = this.settings.get('useInteractionCodeFlow');\n    if (useInteractionCodeFlow) {\n      if (idxResponse.interactionCode) {\n        // Although session.stateHandle isn't used by interation flow,\n        // it's better to clean up at the end of the flow.\n        sessionStorageHelper.removeStateHandle();\n        // This is the end of the IDX flow, now entering OAuth\n        return interactionCodeFlow(this.settings, idxResponse);\n      }  \n    } else {\n      // Do not save state handle for the first page loads.\n      // Because there shall be no difference between following behavior\n      // 1. bootstrap widget\n      //    -> save state handle to session storage\n      //    -> refresh page\n      //    -> introspect using sessionStorage.stateHandle\n      // 2. bootstrap widget\n      //    -> do not save state handle to session storage\n      //    -> refresh page\n      //    -> introspect using options.stateHandle\n      if (lastResponse) {\n        sessionStorageHelper.setStateHandle(idxResponse?.context?.stateHandle);\n      }\n      // Login flows that mimic step up (moving forward in login pipeline) via internal api calls,\n      // need to clear stored stateHandles.\n      // This way the flow can maintain the latest state handle. For eg. Device probe calls\n      if (this.appState.get('currentFormName') === FORMS.CANCEL_TRANSACTION) {\n        sessionStorageHelper.removeStateHandle();\n      }\n    }\n\n    // transform response\n    const ionResponse = transformIdxResponse(this.settings, idxResponse, lastResponse);\n\n    await this.appState.setIonResponse(ionResponse, this.hooks);\n  }\n\n  handleIdxResponseFailure(error: LegacyIdxError = { error: 'unknown', details: undefined }) {\n    // IDX errors will not call the global error handler\n    error = formatError(error);\n    this.handleUpdateAppState(error.details);\n  }\n\n  // Generic error handler for all exceptions\n  handleError(error: LegacyIdxError | StandardApiError | Error = { error: 'unknown', details: undefined }) {\n    // Show error message and notify listeners\n    const originalError = error;\n    const formattedError = formatError({...error}); // format the error to resemble an IDX response\n    this.handleUpdateAppState(formattedError.details);\n    this.settings.callGlobalError(originalError);\n\n    // -- TODO: OKTA-244631 How to surface up the CORS error in IDX?\n    // -- The `err` object from idx.js doesn't have XHR object\n    // Global error handling for CORS enabled errors\n    // if (err.xhr && BrowserFeatures.corsIsNotEnabled(err.xhr)) {\n    //   this.settings.callGlobalError(new Errors.UnsupportedBrowserError(loc('error.enabled.cors')));\n    //   return;\n    // }\n  }\n\n  /* eslint max-statements: [2, 30], complexity: [2, 13] */\n  async render(Controller, options = {}) {\n    // If url changes then widget assumes that user's intention was to initiate a new login flow,\n    // so clear stored token to use the latest token.\n    if (sessionStorageHelper.getLastInitiatedLoginUrl() !== window.location.href) {\n      sessionStorageHelper.removeStateHandle();\n    }\n    // Since we have a wrapper view, render our wrapper and use its content\n    // element as our new el.\n    // Note: Render it here because we know dom is ready at this point\n    if (!this.header.rendered()) {\n      this.el = this.header.render().getContentEl();\n    }\n\n    // If we need to load a language (or apply custom i18n overrides), do\n    // this now and re-run render after it's finished.\n    if (!Bundles.isLoaded(this.settings.get('languageCode'))) {\n      await LanguageUtil.loadLanguage(this.appState, this.settings);\n    }\n\n    // introspect stateToken when widget is bootstrap with state token\n    // and remove it from `settings` afterwards as IDX response always has\n    // state token (which will be set into AppState)\n    if (this.settings.get('oieEnabled')) {\n      try {\n        let idxResp = await startLoginFlow(this.settings);\n        if (idxResp.error) {\n          this.appState.trigger('remediationError', idxResp.error);\n        } else {\n          if (this.settings.get('flow') && !this.hasControllerRendered) {\n            idxResp = await handleConfiguredFlow(idxResp, this.settings);\n          }\n\n          // TODO: OKTA-494979 - temporary fix, remove when auth-js is upgraded to 6.6+\n          if (!idxResp.requestDidSucceed && IonHelper.isIdxSessionExpiredError(idxResp)) {\n            // clear transaction subsequent page loads do not use stale interactionHandle\n            const authClient = this.settings.getAuthClient();\n            authClient.transactionManager.clear();\n          }\n\n          this.appState.trigger('updateAppState', idxResp);\n        }\n      } catch (exception) {\n        this.appState.trigger('error', exception);\n      } finally {\n        // These settings should only be used one time, for initial render\n        this.settings.unset('stateToken');\n        this.settings.unset('proxyIdxResponse');\n      }\n    }\n\n    // Load the custom colors only on the first render\n    if (this.settings.get('colors.brand') && !ColorsUtil.isLoaded()) {\n      const colors = {\n        brand: this.settings.get('colors.brand'),\n      };\n\n      ColorsUtil.addStyle(colors);\n    }\n\n    // Show before initial render\n    this.show();\n\n    // render Controller\n    this.unload();\n    const controllerOptions = _.extend({\n      el: this.el,\n      settings: this.settings,\n      appState: this.appState\n    }, options);\n    this.controller = new Controller(controllerOptions);\n\n    // Bubble up all controller events\n    this.listenTo(this.controller, 'all', this.trigger);\n\n    this.controller.render();\n\n    this.hasControllerRendered = true;\n  }\n\n  /**\n    * When \"Remember My Username\" is enabled, we save the identifier in a cookie\n    * so that the next time the user visits the SIW, the identifier field can be \n    * pre-filled with this value.\n   */\n  updateIdentifierCookie(idxResponse: IdxResponse) {\n    if (this.settings.get('features.rememberMe')) {\n      // Update the cookie with the identifier\n      const user = idxResponse?.context?.user;\n      const { identifier } = user?.value || {};\n      if (identifier) {\n        CookieUtil.setUsernameCookie(identifier);\n      }\n    } else {\n      // We remove the cookie explicitly if this feature is disabled.\n      CookieUtil.removeUsernameCookie();\n    }    \n  }\n\n  hasAuthenticationSucceeded(idxResponse: IdxResponse) {\n    // Check whether authentication has succeeded. This is done by checking the server response\n    // and seeing if either the 'success' or 'successWithInteractionCode' objects are present.\n    return idxResponse?.rawIdxState?.success || idxResponse?.rawIdxState?.successWithInteractionCode;\n  }\n\n  restartLoginFlow() {\n    // clear all transaction data and saved IDX response\n    this.settings.getAuthClient().transactionManager.clear();\n    this.appState.set('idx', undefined);\n\n    // Clear the recoveryToken, if any\n    const authClient = this.settings.getAuthClient();\n    delete authClient.options['recoveryToken'];\n    this.settings.unset('recoveryToken');\n    // clear otp (email magic link), if any\n    this.settings.unset('otp');\n\n    // Re-render the widget\n    this.render(this.controller.constructor);\n  }\n\n  start() {\n    const pushState = BrowserFeatures.supportsPushState();\n    Router.prototype.start.call(this, { pushState: pushState });\n  }\n\n  hide() {\n    this.header.$el.hide();\n  }\n\n  show() {\n    this.header.$el.show();\n  }\n\n  remove() {\n    this.unload();\n    this.header.$el.remove();\n    this.stopListening(this.appState);\n    this.stopListening(this.settings);\n    Bundles.remove();\n    Backbone.history.stop();\n  }\n}\n\n// Add \"Events\" to prototype for compatibility with existing code\nBaseLoginRouter.prototype.Events = Backbone.Events;\n\nexport default BaseLoginRouter;"],"names":["BaseLoginRouter","Router","constructor","options","Events","Backbone","hasControllerRendered","settings","appState","hooks","header","globalSuccessFn","globalErrorFn","err","Logger","error","Settings","_","omit","parse","setAuthClient","authClient","el","callGlobalError","Errors","ConfigError","loc","$","on","AppState","wrapper","AuthContainer","append","render","$el","Enums","WIDGET_CONTAINER_ID","Header","hide","listenTo","updateDeviceFingerprint","handleError","handleUpdateAppState","handleIdxResponseFailure","restartLoginFlow","getAuthClient","fingerprint","get","http","setRequestHeader","idxResponse","hasAuthenticationSucceeded","updateIdentifierCookie","lastResponse","useInteractionCodeFlow","interactionCode","sessionStorageHelper","removeStateHandle","interactionCodeFlow","setStateHandle","context","stateHandle","FORMS","CANCEL_TRANSACTION","ionResponse","transformIdxResponse","setIonResponse","details","undefined","formatError","originalError","formattedError","Controller","getLastInitiatedLoginUrl","window","location","href","rendered","getContentEl","Bundles","isLoaded","LanguageUtil","loadLanguage","idxResp","startLoginFlow","trigger","handleConfiguredFlow","requestDidSucceed","IonHelper","isIdxSessionExpiredError","transactionManager","clear","exception","unset","ColorsUtil","colors","brand","addStyle","show","unload","controllerOptions","extend","controller","user","identifier","value","CookieUtil","setUsernameCookie","removeUsernameCookie","rawIdxState","success","successWithInteractionCode","set","start","pushState","BrowserFeatures","supportsPushState","prototype","call","remove","stopListening","history","stop"],"mappings":"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"}