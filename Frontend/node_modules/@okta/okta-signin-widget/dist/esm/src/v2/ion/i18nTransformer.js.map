{"version":3,"file":"i18nTransformer.js","sources":["../../../../../src/v2/ion/i18nTransformer.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint max-statements: [2, 25], complexity: [2, 15] */\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n///////////////////////////////////////////////////////////////////////////////\n//                                  How this transformer work?               //\n//\n// ## For Labels inside remediation forms\n// 1. Figure out Path for all Labels (for normal field, or options) or Placeholder (for checkbox),e.g.\n//   - `identify.identifier`, this is the label for user name at identify page\n//   - `select-authenticator-enroll.authenticator.email`,\n//      this is for label for email authenticator at `select-authenticator-enroll` page\n// 2. Define a mapping between the path and i18n key. see `I18N_OVERRIDE_MAPPINGS`\n//   - This mapping is subject to change when API starts sending i18n key along with label.\n//     It probably becomes a mapping between API's i18n key and key in login.properties\n//     in order to be backward compatible.\n// 3. Now find i18n value using such route: `i18n Path -> i18n key -> login.properties`\n//    If found an i18n value, replace label by this i18n value.\n//\n// ## For top level messages\n// 1. Overwrite `message.message` if `message.i18n.key` exists in `login.properties`\n//\n// ## How to override mappings in I18N_OVERRIDE_MAPPINGS for localization?\n// Step 1. First search the string in login.properties and see if already exists or not\n// Step 2. Find idx response path, for eg. select-authenticator-enroll.authenticator.email\n// Step 3. Make that path a key and add it to I18N_OVERRIDE_MAPPINGS if doesn't exist already\n// Step 4. If you find a key in Step 1 that already exists, use it as value of key created in Step 3, \n//          else create a new label `oie.your.new.label` and add it.\n// Step 5. If you create a new label then add that to login.properties file with proper string\n//         oie.your.new.label = Your new string\n///////////////////////////////////////////////////////////////////////////////\n\nimport { _, loc, $ } from 'okta';\nimport Bundles from 'util/Bundles';\nimport Logger from 'util/Logger';\nimport { getAuthenticatorDisplayName } from '../view-builder/utils/AuthenticatorUtil';\nimport { FORMS, AUTHENTICATOR_KEY } from './RemediationConstants';\nimport { I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS } from '../view-builder/views/enroll-profile/i18nBaseAttributeMappings';\n\nconst WEBAUTHN_API_GENERIC_ERROR_KEY = 'authfactor.webauthn.error';\n\nconst SECURITY_QUESTION_PREFIXES = [\n  'enroll-authenticator.security_question.credentials.questionKey.',\n  'challenge-authenticator.security_question.credentials.questionKey.',\n];\n\nconst I18N_OVERRIDE_MAPPINGS = {\n  'identify.identifier': 'primaryauth.username.placeholder',\n  'select-authenticator-unlock-account.identifier': 'primaryauth.username.placeholder',\n  'identify.credentials.passcode': 'primaryauth.password.placeholder',\n  'identify.rememberMe': 'oie.remember',\n\n  'identify-recovery.identifier': 'password.forgot.email.or.username.placeholder',\n\n  'select-authenticator-enroll.authenticator.duo': 'factor.duo',\n  'select-authenticator-enroll.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-enroll.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-enroll.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-enroll.authenticator.okta_verify': 'oie.okta_verify.label',\n  'select-authenticator-enroll.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-enroll.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-enroll.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-enroll.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-enroll.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-enroll.authenticator.yubikey_token': 'oie.yubikey.label',\n\n  'select-authenticator-authenticate.authenticator.duo': 'factor.duo',\n  'select-authenticator-authenticate.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-authenticate.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-authenticate.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'select-authenticator-authenticate.authenticator.okta_verify.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.totp': 'oie.okta_verify.totp.title',\n  'select-authenticator-authenticate.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-authenticate.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-authenticate.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-authenticate.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-authenticate.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-authenticate.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.custom_app': 'oie.custom.app.authenticator.title',\n\n  'select-authenticator-unlock-account.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-unlock-account.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-unlock-account.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  \n  'authenticator-verification-data.okta_verify.authenticator.methodType.signed_nonce':\n    'oie.okta_verify.signed_nonce.label',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.totp': 'oie.okta_verify.totp.title',\n\n  'authenticator-enrollment-data.phone_number.authenticator.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.sms': 'oie.phone.enroll.sms.label',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.voice': 'oie.phone.enroll.voice.label',\n\n  'enroll-authenticator.okta_password.credentials.passcode': 'oie.password.passwordLabel',\n  'enroll-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.0': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.1': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'enroll-authenticator.security_question.credentials.question': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.questionKey': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'enroll-authenticator.onprem_mfa.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.onprem_mfa.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.rsa_token.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.rsa_token.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.credentialId': 'enroll.symantecVip.credentialId.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.passcode': 'enroll.symantecVip.passcode1.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.nextPasscode': 'enroll.symantecVip.passcode2.placeholder',\n  'enroll-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n\n  'enrollment-channel-data.email': 'oie.enroll.okta_verify.channel.email.label',\n\n  'select-enrollment-channel.authenticator.channel.qrcode': 'oie.enroll.okta_verify.select.channel.qrcode.label',\n  'select-enrollment-channel.authenticator.channel.email': 'oie.enroll.okta_verify.select.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.sms': 'oie.enroll.okta_verify.select.channel.sms.label',\n\n  'challenge-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.okta_password.credentials.passcode': 'mfa.challenge.password.placeholder',\n  'challenge-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'challenge-authenticator.okta_verify.credentials.totp': 'oie.okta_verify.totp.enterCodeText',\n  'challenge-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'challenge-authenticator.onprem_mfa.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.rsa_token.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.custom_otp.credentials.passcode': 'oie.custom_otp.verify.passcode.label',\n  'challenge-authenticator.symantec_vip.credentials.passcode': 'oie.symantecVip.verify.passcode.label',\n  'challenge-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'challenge-authenticator.credentials.passcode': 'oie.password.label',\n\n  'reset-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'incorrectPassword': 'oie.password.incorrect.message',\n  \n  'profile-update.userProfile.secondEmail': 'oie.user.profile.secondary.email',\n\n  'user-code.userCode': 'device.code.activate.label',\n\n  // Remap authn API errors to OIE\n  'api.authn.poll.error.push_rejected': 'oktaverify.rejected',\n\n  // Remap duo API errors to OIE\n  'oie.authenticator.duo.method.duo.verification_timeout': 'oie.authenticator.duo.error',\n  'oie.authenticator.duo.method.duo.verification_failed': 'oie.authenticator.duo.error',\n\n  'idx.email.verification.required': 'registration.complete.confirm.text',\n  'tooManyRequests': 'oie.tooManyRequests',\n  'api.users.auth.error.POST_PASSWORD_UPDATE_AUTH_FAILURE': 'oie.post.password.update.auth.failure.error',\n  'security.access_denied': 'errors.E0000006',\n  'E0000009': 'errors.E0000009',\n  'api.factors.error.sms.invalid_phone': 'oie.phone.invalid',\n  'app.ldap.password.reset.failed': 'errors.E0000017',\n  'oie.selfservice.unlock_user.challenge.failed.permissions': 'errors.E0000006',\n  'core.auth.factor.signedNonce.error.invalidEnrollment': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidFactor': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.deletedDevice': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidDeviceStatus': 'core.auth.factor.signedNonce.error.invalidDevice',\n\n  // re-map autoPush: \"Send push automatically\"\n  'challenge-poll.custom_app.autoChallenge': 'autoPush', // authenticator-verification-custom-app-push-autochallenge\n  'challenge-poll.okta_verify.autoChallenge': 'autoPush', // authenticator-verification-okta-verify-push-autoChallenge-on\n  'authenticator-verification-data.authenticator.autoChallenge': 'autoPush', // authenticator-verification-data-okta-verify-push-autoChallenge-off.json\n  'authenticator-verification-data.okta_verify.authenticator.autoChallenge': 'autoPush',\n  \n  // Existing overrides\n  ...I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS, //enroll-profile strings\n};\n\nconst I18N_PARAMS_MAPPING = {\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.ON_PREM]: {\n      getParam: getAuthenticatorDisplayName,\n    },\n    [AUTHENTICATOR_KEY.RSA]: {\n      getParam: getAuthenticatorDisplayName,\n    },\n  },\n};\n\n/**\n * For i18n keys that require string interpolation using values from \"params\".\n * {baseKey} : {params}\n */\nconst I18N_OVERRIDE_WITH_PARAMS_MAP = {\n  'registration.error.invalidLoginEmail': {\n    Email: 'Email',\n  },\n  'registration.error.doesNotMatchPattern': {\n    Email: 'Email',\n  },\n  'registration.error.notUniqueWithinOrg': {\n    Email: 'Email',\n  },\n};\n\n/**\n * For messages that need to be interpolated with param values.\n *\n * Enumerate each possible param interpolation and hardcode that into properties file.\n * This is to ensure proper translation.\n *\n * Example - a known param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Email\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.Email\n *\n * Example - an unknown param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Custom Property\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.custom\n *\n * @param {String} key\n * @param {String} param\n * @returns {String}\n */\nconst getI8nKeyUsingParams = (key, param) => {\n  let i18nKey = key;\n\n  if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey][param]) {\n    i18nKey += `.${param}`;\n  } else {\n    i18nKey += '.custom';\n  }\n  return i18nKey;\n};\n\nconst getI18NParams = (remediation, authenticatorKey) => {\n  const params = [];\n  const formName = remediation.name;\n  if (I18N_PARAMS_MAPPING[formName] &&\n    I18N_PARAMS_MAPPING[formName][authenticatorKey]) {\n    const config = I18N_PARAMS_MAPPING[formName][authenticatorKey];\n    const param = config.getParam(remediation);\n    params.push(param);\n  }\n  return params;\n};\n\nconst getI18nKey = (i18nPath) => {\n  let i18nKey;\n  // Extract security question value from i18nPath\n  SECURITY_QUESTION_PREFIXES.forEach(prefix => {\n    if (i18nPath.indexOf(prefix) === 0 ) {\n      const securityQuestionValue = i18nPath.replace(prefix, '');\n      i18nKey = `security.${securityQuestionValue}`;\n    }\n  });\n\n  if (I18N_OVERRIDE_MAPPINGS[i18nPath]) {\n    i18nKey = I18N_OVERRIDE_MAPPINGS[i18nPath];\n  }\n\n  if (i18nKey && !Bundles.login[i18nKey]) {\n    Logger.warn(`expect i18n key ${i18nKey} for ${i18nPath} but not found in 'login' bundle.`);\n    i18nKey = null;\n  }\n\n  return i18nKey;\n};\n\nconst doesI18NKeyExist = (i18nKey) => {\n  return !!Bundles.login[i18nKey];\n};\n\n/**\n * Find i18n value using {@code i18nPath} if it exists.\n * Otherwise return {@code defaultValue}.\n *\n * @param {string} i18nPath\n * @param {string} defaultValue\n * @param {string[]} params\n */\nconst getI18NValue = (i18nPath, defaultValue, params = []) => {\n  const i18nKey = getI18nKey(i18nPath);\n  // TODO : OKTA-397225\n  // here defaultValue is uiSchema label or placeholders, some lables may be customized by \n  // admin to anything string. We should not localize and replace these customized labels even if i18nkey exists\n  if (i18nKey) {\n    return loc(i18nKey, 'login', params);\n  } else {\n    Logger.warn(`Avoid rendering unlocalized text sent from the API: ${defaultValue}`);\n    return defaultValue;\n  }\n};\n\nconst updateLabelForUiSchema = (remediation, uiSchema) => {\n  if (uiSchema.mutable === false && uiSchema.name.indexOf('questionKey') < 0) {\n    return;\n  }\n  Logger.info('i18n label transformer');\n  Logger.info('\\t remediationName: ', remediation.name);\n  Logger.info('\\t uiSchema: ', JSON.stringify(uiSchema));\n\n  const authenticatorKey = remediation.relatesTo?.value?.key;\n  const authenticatorKeyPath = authenticatorKey\n    ? `.${remediation.relatesTo.value.key}`\n    : '';\n\n  const i18nPrefix = `${remediation.name}${authenticatorKeyPath}.`;\n  let i18nPath = `${i18nPrefix}${uiSchema.name}`;\n\n  if (uiSchema.type === 'text' && uiSchema.name.indexOf('questionKey') >= 0 && uiSchema.value !== 'custom') {\n    i18nPath = `${i18nPath}.${uiSchema.value}`;\n  }\n\n  if (uiSchema.type === 'checkbox' && uiSchema.placeholder) {\n    Logger.info('\\t 1: ', i18nPath);\n    uiSchema.placeholder = getI18NValue(i18nPath, uiSchema.placeholder);\n  }\n\n  if (uiSchema.label) {\n    Logger.info('\\t 2: ', i18nPath);\n    const params = getI18NParams(remediation, authenticatorKey);\n    uiSchema.label = getI18NValue(i18nPath, uiSchema.label, params);\n  }\n  if ($.isPlainObject(uiSchema.options)) {\n    uiSchema.options = _.mapObject(uiSchema.options, (value, key) => {\n      const i18nPathOption = `${i18nPath}.${key}`;\n      Logger.info('\\t 3: ', i18nPathOption);\n      return getI18NValue(i18nPathOption, value);\n    });\n  }\n  if (Array.isArray(uiSchema.options)) {\n    uiSchema.options.forEach(o => {\n      if (!o.label) {\n        return;\n      }\n      let i18nPathOption;\n      if (o.authenticatorKey) {\n        i18nPathOption = `${i18nPath}.${o.authenticatorKey}`;\n\n        const methodType = o.value?.methodType;\n        if (o.authenticatorKey === AUTHENTICATOR_KEY.OV && methodType) {\n          i18nPathOption = `${i18nPathOption}.${methodType}`;\n        }\n      } else if (o.value !== undefined) { // value could be string or number or undefined.\n        i18nPathOption = `${i18nPath}.${o.value}`;\n      }\n      Logger.info('\\t 4: ', i18nPathOption);\n      o.label = getI18NValue(i18nPathOption, o.label);\n    });\n  }\n\n  if (Array.isArray(uiSchema.optionsUiSchemas)) {\n    uiSchema.optionsUiSchemas.forEach(optionsUiSchema => {\n      optionsUiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n    });\n  }\n\n};\n\nconst isWebAuthnAPIError = ( i18nKey ) => i18nKey.startsWith(WEBAUTHN_API_GENERIC_ERROR_KEY);\n\n/**\n * @typedef {Object} Message\n * @property {string} message\n * @property {Object=} i18n\n * @property {string} i18n.key\n * @property {string[]} i18n.params\n */\n/**\n * - If `message.i18n.key` exists and has a value in 'login.properties'\n *   through the given key or via I18N_OVERRIDE_MAPPINGS, return the value.\n *\n * - returns `message.message` otherwise\n *\n * @param {Message} message\n */\nconst getMessage = (message) => {\n  if (message.i18n?.key) {\n    let i18nKey = message.i18n.key;\n    let i18nParams = message.i18n.params || [];\n\n    // TODO - remove this block once API fix is done - OKTA-398080\n    // Sometimes API sends params: [\"\"] an array with empty string.\n    // example - error-authenticator-enroll-password-common mock\n    if (i18nParams.length === 1 && i18nParams[0] === '') {\n      i18nParams = [];\n    }\n\n    if (I18N_OVERRIDE_MAPPINGS[message.i18n?.key]) {\n      i18nKey = I18N_OVERRIDE_MAPPINGS[message.i18n?.key];\n    } else if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey]) {\n      const param = message.i18n.params?.[0];\n      i18nKey = getI8nKeyUsingParams(i18nKey, param);\n      i18nParams = i18nKey.endsWith('custom') ? [param] : [];\n    }\n\n    if (Bundles.login[i18nKey]) {\n      Logger.info(`Override messages using i18n key ${i18nKey}`);\n      // expect user config i18n properly.\n      // e.g. the i18n value shall have placeholders like `{0}`, when params is not empty.\n      return loc(i18nKey, 'login', i18nParams);\n    }\n\n    if (isWebAuthnAPIError(i18nKey)) {\n      // The WebAuthn api error doesn't make much sense to a typical end user, but useful for developer.\n      // So keep the api message in response, but show a generic error message on UI.\n      return loc(WEBAUTHN_API_GENERIC_ERROR_KEY, 'login');\n    }\n  }\n\n  Logger.warn(`Avoid rendering unlocalized text sent from the API: ${message.message}`);\n  return message.message;\n};\n\n/**\n * @param {Object} error\n */\nconst getMessageFromBrowserError = (error) => {\n  if (error.name) {\n    const key = `oie.browser.error.${error.name}`;\n    if (Bundles.login[key]) {\n      Logger.info(`Override messages using i18n key ${key}`);\n      // expect user config i18n properly.\n      return loc(key, 'login');\n    }\n  }\n  return error.message;\n};\n\n/**\n * - iff `message.i18n.key` exists return the key.\n *\n * @param {Message} message\n */\nconst getMessageKey = (message) => {\n  return message?.i18n?.key || '';\n};\n\nconst uiSchemaLabelTransformer = (transformedResp) => {\n  // Try to override label using i18n value\n  if (Array.isArray(transformedResp.remediations)) {\n    transformedResp.remediations\n      .filter(remediation => Array.isArray(remediation.uiSchema) && remediation.uiSchema.length)\n      .forEach(remediation => {\n        remediation.uiSchema.forEach(uiSchema => updateLabelForUiSchema(remediation, uiSchema));\n      });\n  }\n\n  // Try to override `messages` using i18n value.\n  // 1. This is only handling top level `messages` object when response status is 200.\n  // 2. See `IonResponseHelper.js` where handle `messages` object when none 200 response.\n  // 3. Handling `messages` in remediation forms on 200 response is not considered yet.\n  //    Is that possible?\n  if (Array.isArray(transformedResp.messages?.value)) {\n    transformedResp.messages.value.forEach(message => {\n      message.message = getMessage(message);\n    });\n  }\n  return transformedResp;\n};\n\n/**\n * Has this i18n key been overridden for customization?\n * @param {String} i18nKey\n * @param {Object} settings\n * @returns Boolean\n */\nconst isCustomizedI18nKey = (i18nKey, settings) => {\n  const language = settings.get('languageCode');\n  const i18n = settings.get('i18n');\n  const customizedProperty = i18n && i18n[language] && i18n[language][i18nKey];\n  return !!customizedProperty;\n};\n\nexport {\n  uiSchemaLabelTransformer as default,\n  getMessage,\n  getMessageKey,\n  getI18NParams,\n  doesI18NKeyExist,\n  isCustomizedI18nKey,\n  getMessageFromBrowserError\n};\n"],"names":["WEBAUTHN_API_GENERIC_ERROR_KEY","SECURITY_QUESTION_PREFIXES","I18N_OVERRIDE_MAPPINGS","I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS","I18N_PARAMS_MAPPING","FORMS","ENROLL_AUTHENTICATOR","AUTHENTICATOR_KEY","ON_PREM","getParam","getAuthenticatorDisplayName","RSA","I18N_OVERRIDE_WITH_PARAMS_MAP","Email","getI8nKeyUsingParams","key","param","i18nKey","getI18NParams","remediation","authenticatorKey","params","formName","name","config","push","getI18nKey","i18nPath","forEach","prefix","indexOf","securityQuestionValue","replace","Bundles","login","doesI18NKeyExist","getI18NValue","defaultValue","loc","updateLabelForUiSchema","uiSchema","mutable","relatesTo","value","authenticatorKeyPath","i18nPrefix","type","placeholder","label","$","isPlainObject","options","_","mapObject","i18nPathOption","Array","isArray","o","methodType","OV","undefined","optionsUiSchemas","optionsUiSchema","isWebAuthnAPIError","startsWith","getMessage","message","i18n","i18nParams","length","endsWith","getMessageFromBrowserError","error","getMessageKey","uiSchemaLabelTransformer","transformedResp","remediations","filter","messages","isCustomizedI18nKey","settings","language","get","customizedProperty"],"mappings":"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"}