{"version":3,"file":"EnrollAuthenticatorPasswordView.js","sources":["../../../../../../../src/v2/view-builder/views/password/EnrollAuthenticatorPasswordView.js"],"sourcesContent":["import { loc } from 'okta';\nimport { BaseForm, BaseView } from '../../internals';\nimport BaseAuthenticatorView from '../../components/BaseAuthenticatorView';\nimport {\n  getPasswordComplexityDescriptionForHtmlList,\n  removeRequirementsFromError } from '../../utils/AuthenticatorUtil';\nimport { generatePasswordPolicyHtml } from './PasswordPolicyUtil';\n\nconst Body = BaseForm.extend({\n  title() {\n    return loc('oie.password.enroll.title', 'login');\n  },\n  save() {\n    return loc('oform.next', 'login');\n  },\n\n  initialize() {\n    BaseForm.prototype.initialize.apply(this, arguments);\n    const policy = this.getPasswordPolicySettings();\n    this.displayPasswordPolicy(policy);\n  },\n\n  displayPasswordPolicy(policy) {\n    if (policy) {\n      const rulesList = getPasswordComplexityDescriptionForHtmlList( policy );\n      generatePasswordPolicyHtml(this, rulesList, true);\n    }\n  },\n\n  triggerAfterError(model, error) {\n    error.responseJSON = removeRequirementsFromError(error.responseJSON);\n    this.options.appState.trigger('afterError', error);\n  },\n\n  getPasswordPolicySettings() {\n    // This will be overridden by following scenario since the policies could be different for those.\n    // - password reset (`ReEnrollAuthenticatorPasswordView.js`)\n    //\n    const relatesToObject = this.options.currentViewState.relatesTo;\n    return relatesToObject?.value?.settings;\n  },\n\n  getUISchema() {\n    const uiSchemas = BaseForm.prototype.getUISchema.apply(this, arguments);\n    return uiSchemas.concat([\n      {\n        name: 'confirmPassword',\n        label: loc('oie.password.confirmPasswordLabel','login'),\n        type: 'password',\n        'label-top': true,\n        params: {\n          showPasswordToggle: this.settings.get('showPasswordToggle'),\n        }\n      }\n    ]);\n  }\n});\n\nexport default BaseAuthenticatorView.extend({\n\n  Body,\n\n  createModelClass() {\n    const ModelClass = BaseView.prototype.createModelClass.apply(this, arguments);\n    const local = Object.assign(\n      {\n        confirmPassword: {\n          type: 'string',\n          required: true,\n        }\n      },\n      ModelClass.prototype.local,\n    );\n    return ModelClass.extend({\n      local,\n      validate() {\n        if (this.get('credentials.passcode') !== this.get('confirmPassword') &&\n            this.get('credential.value') !== this.get('confirmPassword')) {\n          const errors = {\n            'confirmPassword': loc('password.error.match', 'login'),\n          };\n          return errors;\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n});\n"],"names":["Body","BaseForm","extend","title","loc","save","initialize","prototype","apply","arguments","policy","getPasswordPolicySettings","displayPasswordPolicy","rulesList","getPasswordComplexityDescriptionForHtmlList","generatePasswordPolicyHtml","triggerAfterError","model","error","responseJSON","removeRequirementsFromError","options","appState","trigger","relatesToObject","currentViewState","relatesTo","value","settings","getUISchema","uiSchemas","concat","name","label","type","params","showPasswordToggle","get","BaseAuthenticatorView","createModelClass","ModelClass","BaseView","local","Object","assign","confirmPassword","required","validate","errors"],"mappings":"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"}